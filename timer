# Import the time module
import time
#Import tkinter module to create an interfaces
from tkinter import *
from tkinter import messagebox
from threading import *


# Creating a CounDown Class
class CountDown:
    #window for countdown timer
    def __init__(self, root):
        self.window = root
        self.window.geometry("480x320")
        self.window.title('CountDown Timer')
        # Tkinter window background color
        self.window.configure(bg='gray65')  
        # Fixing the Window length constant
        self.window.resizable(width = False, height = False)

        # Declaring a variable to pause the countdown time
        self.pause = False

        # making start and pause button inside window
        self.button_frame = Frame(self.window, bg="gray65", width=240, height=40)
        self.button_frame.place(x=230, y=150)
        
        # Making frame to show the countdown 
        self.time_frame = Frame(self.window, bg="gray35",width=480, height=120).place(x=0, y=210)

        # Tkinter Labels
        time_label = Label(self.window, text="Timer", font=("times new roman",20, "bold"), bg='gray65',fg='dark blue')
        time_label.place(x=180, y=30)

        hour_label = Label(self.window, text="Hour",font=("times new roman",15), bg='gray35', fg='black')
        hour_label.place(x=50, y=70)

        minute_label = Label(self.window, text="Minute",font=("times new roman",15), bg='gray35', fg='black')
        minute_label.place(x=200, y=70)

        second_label = Label(self.window, text="Second",font=("times new roman",15), bg='gray35', fg='black')
        second_label.place(x=350, y=70)

        # Making 'entry' box for user to put specific time in hour,minutes and seconds
        self.hour = IntVar()
        Entry(self.window, width=8, textvariable=self.hour,font=("times new roman",15)).place(x=50,y=110)
        self.hour.set("00")

        self.minute = IntVar()
        Entry(self.window, width=8, textvariable=self.minute,font=("times new roman",15)).place(x=200,y=110)
        self.minute.set("00")
        
        self.second = IntVar()
        Entry(self.window, width=8, textvariable=self.second,font=("times new roman",15)).place(x=350,y=110)
        self.second.set("00")

        # Tkinter Buttons
        # Finish button --- To close the window
        finish_button = Button(self.window,text='Finish',font=('Helvetica',12), bg="white", fg="black",command=self.Finish)
        finish_button.place(x=30, y=150)

        # Set Time Button --- To fix the values user entered
        # By pressing it user can see start and pause buttons
        set_button = Button(self.window, text='Set',font=('Helvetica',12),bg="white",fg="black",command=self.Get_Time)
        set_button.place(x=170, y=150)
        
        # Reset button --- To set a new timer
        reset_button = Button(self.window, text='Reset',font=('Helvetica',12),bg="white",fg="black",command=self.Reset)
        reset_button.place(x=100, y=150)

    # It will close the window
    def Finish(self):
        self.pause = True
        self.window.destroy()
    
    # When the set button is pressed, this
    # function gets called
    def Get_Time(self):
        self.time_display = Label(self.time_frame, font=('Helvetica', 20 , "bold"), bg = 'gray35', fg = 'yellow')
        self.time_display.place(x=130, y=210)

        try:
            # Total amount of time in seconds
            h = (int(self.hour.get())*3600)
            m = (int(self.minute.get())*60)
            s = (int(self.second.get()))
            self.time_left = h + m + s

            # if user put time(0:0:0) then a warning message will display
            if s == 0 and m == 0 and h == 0:
                messagebox.showwarning('Warning!',\
                'Please select a right time to set')
            else:
                # Start Button
                start_button = Button(self.button_frame,text='Start', font=('Helvetica',12),bg="green", fg="white", \
                command=self.Threading)
                start_button.place(x=10, y=0)

                # Pause Button
                pause_button = Button(self.button_frame,text='Pause', font=('Helvetica',12), \
                bg="red", fg="white", command=self.pause_time)
                pause_button.place(x=90, y=0)
                
        except Exception as es:
            messagebox.showerror("Error!", \
            f"Error due to {es}")
    # function for reset button---it clears all the frame inside button_frame and time_frame        
    def Reset(self):
            for widget in self.button_frame.winfo_children():
                widget.destroy()
            self.time_display.config(text="")
            self.time_display.update()
            self.hour.set("00")
            self.minute.set("00")
            self.second.set("00")
            

    # Creating a thread to run the show_time function
    def Threading(self):
        self.x = Thread(target=self.start_time, daemon=True)
        self.x.start()
    
    # pause function
    def pause_time(self):
        self.pause = True

        mins, secs = divmod(self.time_left, 60)
        hours = 0
        if mins > 60:
            hours, mins = divmod(mins, 60)

        self.time_display.config(text=f"Time Left: {hours}: {mins}: {secs}")
        
        self.time_display.update()

    # start function.
    def start_time(self):
        self.pause = False
        while self.time_left > 0:
            mins, secs = divmod(self.time_left, 60)

            hours = 0
            if mins > 60:
                # hour minute
                hours, mins = divmod(mins, 60)

            self.time_display.config(text=f"Time Left: {hours}: {mins}: {secs}")
            # sleep function: for 1 second
            time.sleep(1)
            
            self.time_left = self.time_left -1
            self.time_display.update()
            
            # time over phase
            if self.time_left <= 0:
                
                self.time_display.config(text="Time over!!",fg="black")
                self.time_display.update()

            # if the pause button is pressed--- timer stops
            if self.pause == True:
                break


if __name__ == "__main__":
    root = Tk()
    # Creating a CountDown class object
    object = CountDown(root)
    root.mainloop()
